import React, { Component } from 'react';
//import data from "../../data/Courses";
import fire from '../../data/Fire';
import { MdWarning, MdDone, MdQuestionAnswer } from 'react-icons/md';
import {Link} from "react-router-dom";
import AnswerText from './../Answers/AnswerText';
import AnswerLikert from './../Answers/AnswerLikert';
import AnswerLink from './../Answers/AnswerLink';

class QuestionMain extends Component{
    constructor(props){
        super(props);
        this.state = {
            match:this.props.match,
            mode: 'loading',
            number: 1,
            name: '',
            description: '',
            answerType: '',
            url: '',
            status: '',
        }
    }

    /*
    sample document for question: {
    "questionId":"0",
    "number":"1",
    "name":"question a",
    "description":"what kinds of details do you expect to learn from this individual that you could not otherwise know?",
    "answerType":"text",
    "status":"incomplete"
    }
    */

    /*
    sample document for answer:  {
      answerid: autogenerated
      answerer:  userid of answering party [jomalair@iu.edu]
      answertype:  [text][video][audio][image]
      title:  [nullable, used only for video / audio / image]
      caption:  [nullable, used only for video / audio / image]
      description:  [nullable, text only, unused for video / audio / image]
      url:  [nullable, used only for video / audio / image]
      answertype:  [text][video][audio][image]
      status:  incomplete / complete
      }

    */

    handleChange = (e) => {
        e.preventDefault();
        this.setState({
            [e.target.name]:e.target.value,
        });
        console.log(this.state);
    };

    questionAnswered = (status, mode) => {
      this.setState({
        status,
        mode,
      });
      this.updateQuestion();
    }

    getQuestionInfo(){
      const { aId, cId, tId, qId } = this.state.match.params;
      let questionRef = fire.database().ref(`/courses/${cId}/assignments/${aId}/tasks/${tId}/questions/${qId}`);
      return questionRef.once('value', (snapshot) => {
          console.log(`task details: ${snapshot.key} ${snapshot.val()}`);
          this.setState({
            cId: cId,
            aId: aId,
            tId: tId,
            qId: qId,
            number: snapshot.val().number,
            name: snapshot.val().name,
            description: snapshot.val().description,
            answerType: snapshot.val().answerType,
            status: snapshot.val().status,
            url: snapshot.val().url,
            mode: 'loaded',
            answer: '',
          });
      });
    }

    renderIcon(){
        switch(this.state.status){
            case 'incomplete':
                return(
                    <div style={styles.iconPanel}>
                        <p>{this.state.status}</p>
                        <MdWarning style={styles.iconStyle} />
                    </div>
                );
            case 'complete':
                return(
                    <div style={styles.iconPanel}>
                        <p>{this.state.status}</p>
                        <MdDone style={styles.iconStyle} />
                    </div>
                );
            default:
                return null;
        }

    }

    answerQuestion = () => {
      this.setState({ mode: 'answering' });
    }

    updateQuestion(key, value){
      const { cId, aId, tId, qId } = this.state.match.params;
      let questionRef = fire.database().ref(`/courses/${cId}/assignments/${aId}/tasks/${tId}/questions/${qId}`);
      questionRef.update(key, value);
    }

    renderAnswerIcon(){
      switch(this.state.status){
        case 'incomplete':
          return(
            <div style={styles.addButtonStyle} onClick={this.answerQuestion}>
                <MdQuestionAnswer style={styles.iconStyle}/>
                <p>Answer</p>
            </div>
          );
        case 'complete':
          return(
            <div style={styles.addButtonStyle}>
              <MdQuestionAnswer style={styles.disabledIconStyle}/>
              <p>answer</p>
            </div>
          );
        default:
          return null;
      }
    }

    componentDidMount(){
      this.getQuestionInfo();
    }

    render(){
        const { cId, aId, tId, qId } = this.state.match.params;

        switch(this.state.mode){
          case 'loading':
            return(
                <div>
                    <div>
                        <Link exact="true" replace to={`/Dashboard`}>Dashboard</Link>{' '}>{' '}
                        <Link exact="true" replace to={`/Courses/${cId}`}>Course</Link>{' '}>{' '}
                        <Link exact="true" replace to={`/c/${cId}/Assignments/${aId}`}>Assignment</Link>{' '}>{' '}
                        <Link exact="true" replace to={`/c/${cId}/a/${aId}/Tasks/${tId}`}>Task</Link>{' '}>{' '}
                        <Link exact="true" replace to={`/c/${cId}/a/${aId}/t/${tId}/Questions/${qId}`}>Question</Link>
                    </div>
                    <div>
                        <h3> loading ........ </h3>
                    </div>
                </div>
            );
          case 'loaded':
            return (
                <div>
                    <div>
                        <Link exact="true" replace to={`/Dashboard`}>Dashboard</Link>{' '}>{' '}
                        <Link exact="true" replace to={`/Courses/${cId}`}>Course</Link>{' '}>{' '}
                        <Link exact="true" replace to={`/c/${cId}/Assignments/${aId}`}>Assignment</Link>{' '}>{' '}
                        <Link exact="true" replace to={`/c/${cId}/a/${aId}/Tasks/${tId}`}>Task</Link>{' '}>{' '}
                        <Link exact="true" replace to={`/c/${cId}/a/${aId}/t/${tId}/Questions/${qId}`}>Question</Link>
                    </div>
                    <div>
                        <h2>{this.state.number}{'.'}{'  '}{this.state.name}</h2>
                        <h4>{this.state.description}</h4>
                        {this.renderIcon()}
                        {this.renderAnswerIcon()}
                    </div>
                </div>
            );
          case 'answering':
            switch(this.state.answerType){
              case 'text':
                return (
                    <AnswerText
                      cId={this.state.cId}
                      aId={this.state.aId}
                      tId={this.state.tId}
                      qId={this.state.qId}
                      match={this.state.match}
                      name={this.state.name}
                      description={this.state.description}
                      number={this.state.number}
                      answerType={this.state.answerType}
                      action={this.questionAnswered}
                    />
                );
                break;
              case 'likert':
                return (
                  <AnswerLikert
                    cId={this.state.cId}
                    aId={this.state.aId}
                    tId={this.state.tId}
                    qId={this.state.qId}
                    match={this.state.match}
                    name={this.state.name}
                    description={this.state.description}
                    number={this.state.number}
                    answerType={this.state.answerType}
                    action={this.questionAnswered}
                  />
                );
              case 'url':
                return(
                  <AnswerLink
                    cId={this.state.cId}
                    aId={this.state.aId}
                    tId={this.state.tId}
                    qId={this.state.qId}
                    match={this.state.match}
                    name={this.state.name}
                    description={this.state.description}
                    number={this.state.number}
                    answerType={this.state.answerType}
                    url={this.state.url}
                    action={this.questionAnswered}
                  />
                );
              case 'youtube':
                return(
                  <AnswerLink
                    cId={this.state.cId}
                    aId={this.state.aId}
                    tId={this.state.tId}
                    qId={this.state.qId}
                    match={this.state.match}
                    name={this.state.name}
                    description={this.state.description}
                    number={this.state.number}
                    answerType={this.state.answerType}
                    url={this.state.url}
                    action={this.questionAnswered}
                  />
                );
              default:
                return (
                  <h1>Ope, something went wrong</h1>
                );
                break;
            }

          default:
            return null;
        }
    }
}

const styles = {
    iconStyle:{
        height:'25px',
        width:'25px',
    },
    iconPanel:{
        display:'flex',
        flexDirection:'row',
        alignItems:'center',
        justifyContent:'flex-start',
    },
    disabledIconStyle:{
        height:'25px',
        width:'25px',
        opacity: '.6',
        cursor:'not-allowed',
    },
    addButtonStyle:{
        display:'flex',
        flexDirection:'row',
        alignItems:'center',
        justifyContent:'flex-start',
    },
    formStyle: {
        display:'flex',
        flexDirection:'column',
        width: '100%',
    },
    formSectionStyle:{
        display:'flex',
        alignItems:'flex-start',
        justifyContent:'flex-start',
        flexDirection:'column',
        marginRight:'150px',
        width: '100%',
    },
    formInputStyle:{
        width:'400px',
        margin:'5px',
    },
    formTextAreaStyle:{
        width:'400px',
        margin:'5px',
        height:'300px',
    },
}

export default QuestionMain;
